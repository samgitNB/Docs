Override equal method:

-Object class has some basic methods like clone(), toString(), equals()
-Check whether two objects have same data or not

========================================
java model
-Java resources into model elements.
-JAVA object that carrying data/managing data
-private variable/getter-setter/no-arg constructor

========================================

MVC

model :      repsonsible for managing the data of the application /update due to request from view and controller
view  :      res for disply data to user end 
controller : interaction betwen v and m

=========================================
@Controller 
-used for URL mapping and invoking business logic.
-used to mark classes as Spring MVC Controller.

=============================================

RestControllers
-does nothing more than adding the @Controller and @ResponseBody annotations 
-@ResponseBody is activate by default

============================
RequestBody

-convert the incoming JSON to a UserStats(java-object) object from the post body

ResponseBody

- it would serialize the returned object to JSON 
- Client would see this JSON 

======================================

java bean definitions:

classes that encapsulate many objects into a single object (the bean). 
They are serializable, 
have a zero-argument constructor,
allow access to properties using getter and setter methods.

=====================================
RequestMapping

@RequestMapping("/home")
-With class definition-> to create the base URI.(localhost:8080/home)
-With method to provide the -> URI pattern 
========================

PathVariable 

-can map the URI variable{variable} -> to one of the method arguments

===================================


Content-Type( specify the submitted media type) : -consumes the request body, 

Accept  : -produces the response body.

======================================


SpringBootApplication :

-alternative -> :@Configuration /@EnableAutoConfiguration/@ComponentScan
-@SpringBootApplication annotation which works same as three annotation 

@Configuration

-tags the class as a source of bean definitions for the application context.
-used by JavaConfig(ApplicationConfiguration.java) as where beans are declared
-used for defining beans using the Java configuration [ xml/annotation ].

@ComponentScan
-scans the base packages 
-create beans of annotated java components
-tells Spring to look for other components/configuration/service  in the specified path.


@EnableAutoConfiguration
-enables the application to add the beans using the classpath definitions

====================================================

@Autwire
-tells the DI container to inject a dependency

@Repository

-use in persistence layer
-marks the specific class as a DAO

@Service
-used in your service layer
-marks the specific class as a DTO

-classes that perform service tasks
-best practice [ no need use ]







http://javabeat.net/springbootapplication-annotation/


